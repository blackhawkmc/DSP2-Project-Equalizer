//////////////////////////////////////////////////////////////////////////////
// *
// * Predmetni projekat iz predmeta OAiS DSP 2
// * Godina: 2017
// *
// * Zadatak: Ekvalizacija audio signala
// * Autor:
// *                                                                          
// *                                                                          
/////////////////////////////////////////////////////////////////////////////

#include "stdio.h"
#include "ezdsp5535.h"
#include "ezdsp5535_i2c.h"
#include "aic3204.h"
#include "ezdsp5535_aic3204_dma.h"
#include "ezdsp5535_i2s.h"
#include "ezdsp5535_sar.h"
#include "print_number.h"
#include "math.h"

#include "iir.h"
#include "processing.h"

/* Frekvencija odabiranja */
#define SAMPLE_RATE 16000L

#define PI 3.14159265

/* Niz za smestanje ulaznih i izlaznih odbiraka */
#pragma DATA_ALIGN(sampleBufferL,4)
Int16 sampleBufferL[AUDIO_IO_SIZE];
#pragma DATA_ALIGN(sampleBufferR,4)
Int16 sampleBufferR[AUDIO_IO_SIZE];

Int16 output1[AUDIO_IO_SIZE];
Int16 output2[AUDIO_IO_SIZE];
Int16 output3[AUDIO_IO_SIZE];
Int16 output4[AUDIO_IO_SIZE];

float alpha;
float beta;
Int16 shCoeffL[4];
Int16 shCoeffH[4];
Int16 shPeekCoeffPL[6];
Int16 shPeekCoeffPH[6];
Int16 xHistoryL[2];
Int16 yHistoryL[2];
Int16 xHistoryH[2];
Int16 yHistoryH[2];
Int16 xHistoryPL[3];
Int16 yHistoryPL[3];
Int16 xHistoryPH[3];
Int16 yHistoryPH[3];

Int16 k[4] = { 24000, 24000, 24000, 24000 };
int ki= 0;

float f[6] = { 2 * PI * 150/SAMPLE_RATE, 2 * PI * 460/SAMPLE_RATE, 2 * PI * 270/SAMPLE_RATE, 2 * PI * 3015/SAMPLE_RATE, 2 * PI * 1915/SAMPLE_RATE, 2 * PI * 5500/SAMPLE_RATE };

Uint16 getKey()
{
    static Uint16 old = NoKey;
    Uint16 key = EZDSP5535_SAR_getKey();
    if (key == old) {
        return NoKey;
    } else {
        old = key;
        return key;
    }
}

void printNewValue() {
	setWritePointerToFirstChar();
	printChar('0' + ki);
   	printChar('0' + k[ki] / 3277);
}

Int16 Dirac[AUDIO_IO_SIZE];

void main( void )
{   
    /* Inicijalizaija razvojne ploce */
    EZDSP5535_init( );

    /* Inicijalizacija kontrolera za ocitavanje vrednosti pritisnutog dugmeta*/
    EZDSP5535_SAR_init();

    /* Inicijalizacija LCD kontrolera */
    initPrintNumber();

	printf("\n Ekvalizacija audio signala \n");
		
    /* Inicijalizacija veze sa AIC3204 kodekom (AD/DA) */
    aic3204_hardware_init();
	
    /* Inicijalizacija AIC3204 kodeka */
    aic3204_init();

    aic3204_dma_init();
    
    initPrintNumber();
    printNewValue();

    /* Postavljanje vrednosti frekvencije odabiranja i pojacanja na kodeku */
    set_sampling_frequency_and_gain(SAMPLE_RATE, 0);

    int i;
    Dirac[0] = 16000;
    for (i = 1; i < AUDIO_IO_SIZE; i++) {
        Dirac[i] = 0;
    }

    /* Set hystory to 0 */
    for (i = 0; i < 2; i++) {
        xHistoryL[i] = 0;
        yHistoryL[i] = 0;
        xHistoryH[i] = 0;
        yHistoryH[i] = 0;
    }

    float alpha, beta;

    alpha = (1 - sin(f[0]))/cos(f[0]);
    calculateShelvingCoeff(0.3, shCoeffL);

    alpha = (1 - sin(f[2]))/cos(f[2]);
    beta = cos(f[1]);
    calculatePeekCoeff(alpha, beta, shPeekCoeffPL);

    alpha = (1 - sin(f[4]))/cos(f[4]);
    beta = cos(f[3]);
    calculatePeekCoeff(alpha, beta, shPeekCoeffPH);

    alpha = (1 - sin(f[5]))/cos(f[5]);
    calculateShelvingCoeff(alpha, shCoeffH);

    while(1)
    {
    	aic3204_read_block(sampleBufferL, sampleBufferR);

    	Uint16 key = getKey();

    	switch (key) {
    	    case SW1:
    	        (ki+ 1 == 4) ? ki= 0 : ++ki;
    	        printNewValue();
    	        break;
    	    case SW2:
    	        k[ki] -= 3277;
    	        if (k[ki] < 0) {
    	            k[ki] = 32767;
    	        }
    	        printNewValue();
    	        break;
    	}

    	setWritePointerToFirstChar();


    	for(i = 0; i < AUDIO_IO_SIZE; i++)
        {
    		//alpha = -0.3);
    		//calculateShelvingCoeff(alpha,shCoeffL);
    		//alpha = 0.7;
    		//beta = 0;
            //calculatePeekCoeff(alpha,beta,shPeekCoeffL);
    		//int K_d=8192; //8192 and 24576

    		output1_Dirac[i] = shelvingLP(Dirac[i],shCoeffL,xHistoryL,yHistoryL,K[0]);
    		output2_Dirac[i] = shelvingPeek(Dirac[i],shPeekCoeffL,xHistoryPL,yHistoryPL,K[1]);
    		output3_Dirac[i] = shelvingPeek(Dirac[i],shPeekCoeffH,xHistoryPH,yHistoryPH,K[2]);
            output4_Dirac[i] = shelvingHP(Dirac[i],shCoeffH,xHistoryH,yHistoryH,K[3]);

    	    /*output1[i] = shelvingLP(sampleBufferL[i], shCoeffL, xHistoryL, yHistoryL, k[0]);
            output2[i] = shelvingPeek(output1[i], shPeekCoeffPL, xHistoryPL, yHistoryPL, k[1]);
            output3[i] = shelvingPeek(output2[i], shPeekCoeffPH, xHistoryPH, yHistoryPH, k[2]);
            output4[i] = shelvingHP(output3[i], shCoeffH, xHistoryH, yHistoryH, k[3]);*/
        }

    	aic3204_write_block(output4, output4);
	}

    	
	/* Prekid veze sa AIC3204 kodekom */
    aic3204_disable();

    printf( "\n***Kraj programa***\n" );
	SW_BREAKPOINT;
}
